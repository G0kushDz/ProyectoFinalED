°°° Quick Sort °°°

Quick Sort comienza eligiendo un elemento de la lista llamado pivote. Luego, divide la lista en 
dos partes: una con los elementos menores o iguales al pivote y otra con los mayores. 
Esta operación se conoce como partición. Después de la partición, el pivote queda en su posición 
final dentro de la lista ordenada. Luego, el mismo proceso se aplica de forma recursiva a las 
sublistas izquierda y derecha (los elementos menores y mayores al pivote). Este proceso de dividir 
y ordenar continúa hasta que todas las sublistas tengan un solo elemento o estén vacías, momento 
en el que toda la lista estará completamente ordenada.

°Tiempo de ordenamiento°
°Mejor caso: O(n log n)
 Cuando el pivote divide la lista en dos partes aproximadamente iguales en cada partición.

°Caso promedio: O(n log n)
 Para listas con ordenación aleatoria, la mayoría de las particiones son balanceadas.

°Peor caso: O(n²)
 Ocurre cuando el pivote es siempre el elemento más pequeño o más grande, generando particiones 
 muy desbalanceadas (por ejemplo, lista ya ordenada o inversa sin optimizaciones).


°Ventajas°
-Es uno de los algoritmos de ordenamiento más rápidos en la práctica para listas grandes.
-Tiene un tiempo promedio muy eficiente de O(n log n).
-Es un algoritmo in-place, no requiere espacio adicional significativo.
-Puede ser optimizado con técnicas para elegir buenos pivotes, mejorando su rendimiento.
-Fácil de implementar de forma recursiva.

°Desventajas°
-En el peor caso, su tiempo puede degradarse a O(n²), especialmente si se elige mal el pivote 
 (por ejemplo, en listas ya ordenadas o inversas).
-No es un algoritmo estable, puede cambiar el orden relativo de elementos iguales.
-La implementación recursiva puede causar sobrecarga en la pila para listas muy grandes sin 
 optimizaciones.



°° PROGRAMA: QuickSort.py °°

Para comprobar su eficiencia se realizo un programa "QuickSort.py" que se encuentra en la misma
carpeta que este archivo.
-El programa realiza el ordenamiento de 5 conjuntos cada uno con una cantidad diferente 
 de elementos, los elementos son generados de forma aleatoria:
	1er conjunto: 2 elementos
	2do conjunto: 10 elementos
	3er conjunto: 100 elementos
	4to conjunto: 1000 elementos
	5to conjunto: 10000 elementos


Estos fueron los resultados de una ejecución del programa, se muestra la cantidad de elementos que
se ordenaron y los pasos que tardó en realizar el ordenamiento:
2 elementos... 9 pasos
10 elementos... 148 pasos
100 elementos... 2857 pasos
1000 elementos... 39187 pasos
10000 elementos... 603272 pasos



La tabla siguiente representa una comparación de su eficiencia con otros algoritmos de ordenamiento
(Todos hicieron la prueba con los mismos 5 conjuntos):

		2 elementos	10 elementos	100 elementos	1,000 elementos	10,000 elementos
InsertionSort	( 7  )		( 72  )	 	( 5,147 )	( 502,197 )	( 50,028,401 )
BubbleSort	( 4  )		( 126 )		( 5,038 )	( 503,344 )	( 49,985,874 )
MergeSort	( 14 )		( 107 )		( 1,082 )	( 11,766  )	( 132,104    )
HeapSort	( 14 )		( 100 )		( 1,220 )	( 14,184  )	( 167,208    )
QuickSort	( 10 )		( 71  )		( 751   )	( 9,904   )	( 117,163    )
CountingSort	( 9  )		( 31  )		( 398   )	( 4,061   )	( 40,269     )
RadixSort	( 33 )		( 97  )		( 969   )	( 10,314  )	( 108,804    )
BucketSort	( 31 )		( 63  )		( 610   )	( 6,709   )	( 67,087     )