°°° Heap Sort °°°

Heap Sort convierte primero la lista en una estructura llamada montículo (heap), específicamente 
un montículo máximo, donde el elemento más grande siempre está en la raíz (al inicio de la lista). 
Una vez construido el heap, el elemento mayor (la raíz) se intercambia con el último elemento de 
la lista y se considera ya ordenado. Luego, se reconstruye el heap con los elementos restantes, 
manteniendo la propiedad de montículo máximo. Este proceso de intercambio y reconstrucción se 
repite, extrayendo el mayor elemento en cada paso y colocándolo al final. Al finalizar todas las 
extracciones, la lista estará completamente ordenada de menor a mayor.

°Tiempo de ordenamiento°
°Mejor caso: O(n log n)
 La construcción del heap y la extracción de elementos se mantienen constantes incluso si la lista 
 ya está ordenada.

°Caso promedio: O(n log n)
 La estructura del heap garantiza un rendimiento estable en listas desordenadas.

°Peor caso: O(n log n)
 Incluso en el peor escenario, la complejidad no cambia debido a la forma en que se mantiene el 
 heap.


°Ventajas°
-Tiene un rendimiento garantizado de O(n log n) en todos los casos (mejor, promedio y peor).
-Es un algoritmo in-place, ya que no requiere espacio adicional significativo aparte del arreglo 
 original.
-No depende del orden inicial de los datos, por lo que su tiempo de ejecución es consistente.
-Útil cuando se necesita un rendimiento estable y memoria limitada.

°Desventajas°
-No es un algoritmo estable, puede cambiar el orden relativo de elementos iguales.
-La constante oculta en la notación O puede ser mayor que otros algoritmos como Quick Sort, 
 haciéndolo más lento en la práctica para muchos casos.
-Su implementación es más compleja que la de algoritmos simples como Bubble Sort o Insertion Sort.



°° PROGRAMA: HeapSort.py °°

Para comprobar su eficiencia se realizo un programa "HeapSort.py" que se encuentra en la misma
carpeta que este archivo.
-El programa realiza el ordenamiento de 5 conjuntos cada uno con una cantidad diferente 
 de elementos, los elementos son generados de forma aleatoria:
	1er conjunto: 2 elementos
	2do conjunto: 10 elementos
	3er conjunto: 100 elementos
	4to conjunto: 1000 elementos
	5to conjunto: 10000 elementos


Estos fueron los resultados de una ejecución del programa, se muestra la cantidad de elementos que
se ordenaron y los pasos que tardó en realizar el ordenamiento:
2 elementos... 19 pasos
10 elementos... 195 pasos
100 elementos... 4977 pasos
1000 elementos... 79833 pasos
10000 elementos... 1097739 pasos



La tabla siguiente representa una comparación de su eficiencia con otros algoritmos de ordenamiento
(Todos hicieron la prueba con los mismos 5 conjuntos):

		2 elementos	10 elementos	100 elementos	1,000 elementos	10,000 elementos
InsertionSort	( 7  )		( 72  )	 	( 5,147 )	( 502,197 )	( 50,028,401 )
BubbleSort	( 4  )		( 126 )		( 5,038 )	( 503,344 )	( 49,985,874 )
MergeSort	( 14 )		( 107 )		( 1,082 )	( 11,766  )	( 132,104    )
HeapSort	( 14 )		( 100 )		( 1,220 )	( 14,184  )	( 167,208    )
QuickSort	( 10 )		( 71  )		( 751   )	( 9,904   )	( 117,163    )
CountingSort	( 9  )		( 31  )		( 398   )	( 4,061   )	( 40,269     )
RadixSort	( 33 )		( 97  )		( 969   )	( 10,314  )	( 108,804    )
BucketSort	( 31 )		( 63  )		( 610   )	( 6,709   )	( 67,087     )


