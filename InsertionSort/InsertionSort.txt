°°° Insertion Sort °°°

Su funcionamiento es análogo a la forma de ordenar una mano jugando a las cartas Ej:
-Comienza con una mano izquierda vacía.
-Se retira una carta a la vez de la mesa y se coloca en la posición correcta de la mano izquierda.
-Para encontrar la posición correcta de una carta, se compara de derecha a izquierda con cada
 una de las cartas que ya están en la mano izquierda.
De igual forma funciona insertion sort, comienza desde el segundo elemento de la lista ya que el
primero ya se considera ordenado, cada elemento nuevo que entra se compara con los anteriores de
derecha a izquierda, si el elemento es menor que alguno anterior, los elementos mayores se mueven
una posición a la derecha y el elemento se insertará en la posición correcta. Este proceso se 
repite con cada elemento nuevo hasta que la lista esté ordenada.

°Tiempo de Ordenamiento°
Ej: [4,5,6,7,8,9] --> (lista ya ordenada)

°Mejor caso: O(n)
 [4,5,6,7,8,9] --> (lista ya ordenada)

°Caso promedio: O(n²)
 [5,4,7,6,9,8] --> (lista con orden irregular)

°Peor caso: O(n²)
 [9,8,7,6,5,4] -->(lista en orden inverso)


°Ventajas°
-Fácil de implementar.
-No requiere memoria adicional.
-Muy eficiente para listas pequeñas o casi ordenadas.
-Conserva el orden de elementos con valores iguales

°Desventajas°
-Ineficiente en listas grandes debido a su complejidad cuadrática.
-No es adecuado para aplicaciones con grandes volúmenes de datos.



°° PROGRAMA: InsertionSort.py °°

Para comprobar su eficiencia se realizo un programa "InsertionSort.py" que se encuentra en la misma
carpeta que este archivo.
-El programa realiza el ordenamiento de 5 conjuntos cada uno con una cantidad diferente 
 de elementos, los elementos son generados de forma aleatoria:
	1er conjunto: 2 elementos
	2do conjunto: 10 elementos
	3er conjunto: 100 elementos
	4to conjunto: 1000 elementos
	5to conjunto: 10000 elementos


Estos fueron los resultados de una ejecución del programa, se muestra la cantidad de elementos que
se ordenaron y los pasos que tardó en realizar el ordenamiento:
2 elementos... 6 pasos
10 elementos... 132 pasos
100 elementos... 8055 pasos
1000 elementos... 761262 pasos
10000 elementos... 75012987 pasos



La tabla siguiente representa una comparación de su eficiencia con otros algoritmos de ordenamiento
(Todos hicieron la prueba con los mismos 5 conjuntos):

		2 elementos	10 elementos	100 elementos	1,000 elementos	10,000 elementos
InsertionSort	( 7  )		( 72  )	 	( 5,147 )	( 502,197 )	( 50,028,401 )
BubbleSort	( 4  )		( 126 )		( 5,038 )	( 503,344 )	( 49,985,874 )
MergeSort	( 14 )		( 107 )		( 1,082 )	( 11,766  )	( 132,104    )
HeapSort	( 14 )		( 100 )		( 1,220 )	( 14,184  )	( 167,208    )
QuickSort	( 10 )		( 71  )		( 751   )	( 9,904   )	( 117,163    )
CountingSort	( 9  )		( 31  )		( 398   )	( 4,061   )	( 40,269     )
RadixSort	( 33 )		( 97  )		( 969   )	( 10,314  )	( 108,804    )
BucketSort	( 31 )		( 63  )		( 610   )	( 6,709   )	( 67,087     )